import React, { useState, useEffect, useRef } from 'react';
import { getMovieRecommendations } from '../services/openaiService';

const genreEmojis = {
  comedy: "üòÇ",
  action: "üí•",
  drama: "üé≠",
  romance: "‚ù§Ô∏è",
  scifi: "üëΩ",
  horror: "üëª",
  thriller: "üî™",
  fantasy: "üßô",
  animation: "üê≠"
};

const Chatbot = ({ onClose }) => {
  const [messages, setMessages] = useState(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏—è—Ç–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å—ä—Å —Å–∏—Å—Ç–µ–º–Ω–æ—Ç–æ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–æ—Ç–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
    const initialMessages = [{
      role: "system",
      content: `
        –¢–∏ —Å–∏ FilmGPT - –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–µ–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞ —Ñ–∏–ª–º–æ–≤–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫. –¢–≤–æ–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏ –∑–∞–¥–∞—á–∏ —Å–∞:
        1. –î–∞ –∑–∞–¥–∞–≤–∞—à —É—Ç–æ—á–Ω—è–≤–∞—â–∏ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏—è—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        2. –î–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—à —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∏ —Ñ–∏–ª–º–æ–≤–∏ –æ–ø—Ü–∏–∏ –±–∞–∑–∏—Ä–∞–Ω–∏ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç–µ
        3. –î–∞ –¥–∞–≤–∞—à –¥–µ—Ç–∞–π–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≤—Å–µ–∫–∏ —Ñ–∏–ª–º
        4. –î–∞ –ø–æ–¥–¥—ä—Ä–∂–∞—à –ø—Ä–∏—è—Ç–µ–ª—Å–∫–∏ –∏ engaging —Ç–æ–Ω
        –ò–∑–ø–æ–ª–∑–≤–∞–π emoji –∑–∞ –≤–∏–∑—É–∞–ª–µ–Ω –∞–∫—Ü–µ–Ω—Ç.
      `
    }];
    
    initialMessages.push({
      role: "assistant",
      content: `–ó–¥—Ä–∞–≤–µ–π—Ç–µ! üëã –ê–∑ —Å—ä–º –≤–∞—à–∏—è—Ç —Ñ–∏–ª–º–æ–≤ –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ú–æ–≥–∞ –¥–∞ –≤–∏ –ø–æ–º–æ–≥–Ω–∞ —Å:

üé¨ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Ñ–∏–ª–º–æ–≤–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
üçø –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ —Ñ–∏–ª–º–∏
üèÜ –ü—Ä–µ–ø–æ—Ä—ä–∫–∏ –Ω–∞ –±–∞–∑–∞ –Ω–∞–≥—Ä–∞–¥–∏ –∏–ª–∏ –∂–∞–Ω—Ä–æ–≤–µ

–ó–∞ –∫–æ–∏ —Ñ–∏–ª–º–∏ —Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–≤–∞—Ç–µ? –ò–ª–∏ –º–æ–∂–µ –¥–∞ –º–∏ –∫–∞–∂–µ—Ç–µ –∫–∞–∫–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—ä—Ä—Å–∏—Ç–µ? üòä`
    });
    
    return initialMessages;
  });
  
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [userPreferences, setUserPreferences] = useState({
    likedGenres: [],
    dislikedGenres: [],
    likedMovies: [],
    dislikedMovies: []
  });
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const enhanceUserInput = (input) => {
    if (input.length < 15 && !input.endsWith('?')) {
      return `${input} –ú–æ–∂–µ—à –ª–∏ –¥–∞ –º–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—à –Ω—è–∫–æ–ª–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ?`;
    }
    return input;
  };

  const analyzeResponseForPreferences = (message) => {
    const lowerMsg = message.toLowerCase();
    const newPreferences = {...userPreferences};

    Object.keys(genreEmojis).forEach(genre => {
      if (lowerMsg.includes(genre)) {
        if (!newPreferences.likedGenres.includes(genre)) {
          newPreferences.likedGenres.push(genre);
        }
      }
    });

    if (lowerMsg.includes("—Ö–∞—Ä–µ—Å–≤–∞") || lowerMsg.includes("–æ–±–∏—á–∞–º")) {
      const movieMatches = message.match(/"([^"]+)"/g) || [];
      movieMatches.forEach(movie => {
        const cleanMovie = movie.replace(/"/g, '');
        if (!newPreferences.likedMovies.includes(cleanMovie)) {
          newPreferences.likedMovies.push(cleanMovie);
        }
      });
    }

    setUserPreferences(newPreferences);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const processedInput = enhanceUserInput(input);
    const userMessage = { role: "user", content: processedInput };
    
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const response = await getMovieRecommendations([...messages, userMessage]);
      const botMessage = { role: "assistant", content: response };
      
      setMessages(prev => [...prev, botMessage]);
      analyzeResponseForPreferences(response);
    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [...prev, { 
        role: "assistant", 
        content: "–°—ä–∂–∞–ª—è–≤–∞–º, –≤—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ." 
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full bg-gray-800 text-gray-100">
      <div className="bg-gray-900 p-4 flex justify-between items-center border-b border-gray-700">
        <h3 className="text-yellow-400 font-bold text-xl">–§–∏–ª–º–æ–≤ –ï–∫—Å–ø–µ—Ä—Ç</h3>
        <button 
          onClick={onClose}
          className="text-gray-400 hover:text-white transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
          </svg>
        </button>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-800">
        {messages.filter(m => m.role !== 'system').map((msg, i) => (
          <div 
            key={i} 
            className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div className={`max-w-3/4 rounded-lg p-3 ${
              msg.role === 'user' 
                ? 'bg-yellow-500 text-gray-900' 
                : 'bg-gray-700 text-white'
            }`}>
              {msg.content.split('\n').map((line, idx) => (
                <p key={idx}>{line}</p>
              ))}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-gray-700 text-white rounded-lg p-3">
              –ú–∏—Å–ª—è...
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <form onSubmit={handleSubmit} className="p-4 border-t border-gray-700 bg-gray-900">
        <div className="flex gap-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            className="flex-1 bg-gray-700 text-white rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-yellow-500"
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤—ä–ø—Ä–æ—Å –∑–∞ —Ñ–∏–ª–º–∏..."
            disabled={isLoading}
          />
          <button
            type="submit"
            className="bg-yellow-500 hover:bg-yellow-600 text-gray-900 font-bold py-2 px-6 rounded-lg transition duration-300 disabled:opacity-50"
            disabled={isLoading || !input.trim()}
          >
            –ò–∑–ø—Ä–∞—Ç–∏
          </button>
        </div>
      </form>
    </div>
  );
};

export default Chatbot;